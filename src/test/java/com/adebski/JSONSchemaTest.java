package com.adebski;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.fge.jsonschema.core.exceptions.ProcessingException;
import com.github.fge.jsonschema.core.report.ProcessingMessage;
import com.github.fge.jsonschema.core.report.ProcessingReport;
import com.github.fge.jsonschema.main.JsonSchema;
import com.github.fge.jsonschema.main.JsonSchemaFactory;
import org.junit.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class JSONSchemaTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Test
    public void validateCorrectExample() throws IOException, ProcessingException {
        JsonSchema jsonSchema = loadSchema();

        String example =
            Files.readString(Paths.get("./example-executor-service-configuration.json"));
        JsonNode jsonNodeWithExample = objectMapper.readTree(example);

        ProcessingReport report = jsonSchema.validate(jsonNodeWithExample);

        System.out.println("isSuccess: " + report.isSuccess());
        for(ProcessingMessage processingMessage: report) {
            System.out.println(processingMessage);
        }
    }

    @Test
    public void validateIncorrectExample() throws IOException, ProcessingException {
        JsonSchema jsonSchema = loadSchema();

        String example =
            Files.readString(Paths.get("./example-executor-service-configuration-invalid.json"));
        JsonNode jsonNodeWithExample = objectMapper.readTree(example);

        ProcessingReport report = jsonSchema.validate(jsonNodeWithExample);

        System.out.println("isSuccess: " + report.isSuccess());
        for(ProcessingMessage processingMessage: report) {
            System.out.println(processingMessage);
        }
    }

    @Test
    public void loadExampleUsingAutoGeneratedClasses() throws IOException {
        String example =
            Files.readString(Paths.get("./example-executor-service-configuration.json"));
        ExecutorServiceJSONSchema executorServiceJSONSchema =
            objectMapper.readValue(example, ExecutorServiceJSONSchema.class);

        String firstNamePattern =
            executorServiceJSONSchema
                .getExecutorServiceConfigurations()
                .get(0)
                .getNamePattern();
        System.out.println(firstNamePattern);
    }

    private JsonSchema loadSchema() throws IOException, ProcessingException {
        String schema =
            Files.readString(Paths.get("./example-executor-service-configuration-schema.json"));

        JsonNode jsonNodeWithSchema = objectMapper.readTree(schema);

        JsonSchemaFactory jsonSchemaFactory = JsonSchemaFactory.byDefault();
        return jsonSchemaFactory.getJsonSchema(jsonNodeWithSchema);
    }
}
